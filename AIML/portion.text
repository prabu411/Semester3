## Applications of AI

Artificial Intelligence (AI) is applied across a wide range of fields, including:

- **Healthcare:** Disease diagnosis, patient monitoring, drug discovery, and robotic surgery.

- **Finance:** Fraud detection, trading algorithms, credit scoring, and customer service chatbots.

- **Transportation:** Self-driving cars, route optimization, traffic prediction, and fleet management.

- **Retail:** Personalized recommendations, inventory management, and customer support automation.

- **Manufacturing:** Predictive maintenance, quality control, and process automation.

- **Smart homes:** Voice assistants, smart appliances, and security systems.

## Classification of AI Systems with Respect to Environment

AI systems interact with their **environments** and can be classified based on how they perceive and act:

- **Fully Observable vs. Partially Observable:**
  - *Fully observable:* Complete state information is available (e.g., chess board).
  - *Partially observable:* Some information is hidden (e.g., poker game, real-world navigation).

- **Deterministic vs. Stochastic:**
  - *Deterministic:* Outcome is predictable (e.g., tic-tac-toe).
  - *Stochastic:* Outcome involves randomness (e.g., dice games, stock trading).

- **Episodic vs. Sequential:**
  - *Episodic:* Each decision is independent (e.g., image classification).
  - *Sequential:* Past decisions affect future ones (e.g., driving).

- **Static vs. Dynamic:**
  - *Static:* Environment does not change while agent is deciding (e.g., crossword puzzles).
  - *Dynamic:* Environment can change in real-time (e.g., drone navigation).

- **Discrete vs. Continuous:**
  - *Discrete:* Finite number of actions or states (e.g., board games).
  - *Continuous:* Infinite possible actions or states (e.g., controlling a robot arm).

## Problem Solving Agents

- **Agents** are entities that perceive their environment and act upon it to achieve goals.
- **Problem Solving Agents** use search algorithms to find solutions (e.g., shortest path, winning move).

### Search Algorithms

Two main categories:

- **Uninformed Search (Blind Search):** No domain-specific knowledge; operate blindly.
- **Informed Search (Heuristic Search):** Use additional information (heuristics) to improve efficiency.

## Uninformed Search Strategies

1. **Breadth-First Search (BFS):**
   - Explores all nodes at a given depth before moving deeper.
   - Guarantees shortest path in unweighted graphs.

2. **Depth-First Search (DFS):**
   - Explores as deep as possible along each branch before backtracking.
   - May not find shortest path.

3. **Uniform Cost Search (UCS):**
   - Expands the node with the lowest path cost.
   - Guarantees the cheapest solution.

4. **Depth-Limited Search:**
   - DFS with a fixed depth limit.

5. **Iterative Deepening DFS:**
   - Repeatedly applies DFS with increasing depth limits.

## Heuristic Search Strategies (e.g., Google Maps API)

These use **heuristics**—estimated costs to reach the goal.


1. **Best-First Search:** Expands nodes with the best (lowest) heuristic value.

2. **A* Search:**
   - Combines path cost and heuristic estimate.
   - Finds optimal path if heuristic is admissible (never overestimates).
   - Used in Google Maps for route planning, combining road distances (cost) and estimated time/traffic (heuristic).

3. **Greedy Search:** Chooses node closest to goal by heuristic, not always optimal.

## Local Search and Optimization Problems

- Focus not on paths but on states.
- Useful for problems with large or infinite state spaces.

**Examples:**
- Hill Climbing: Moves to neighbor state with best value, may get stuck at local maximum.
- Simulated Annealing: Allows random moves to escape local maxima.
- Genetic Algorithms: Use principles of evolution (mutation, selection) to search solutions.

## Constraint Satisfaction Problems (CSP)

CSPs involve finding a state (or states) that meet a set of constraints.

- **Variables:** Each with possible values (domains).
- **Constraints:** Restrictions among variables (e.g., no two neighboring countries can have the same color).
- **Examples:** Scheduling, Sudoku, Map Coloring.

**Solving CSPs:**
- Backtracking (systematic search)
- Forward Checking (eliminate choices ahead)
- Constraint Propagation (like Arc Consistency)

## Adversarial Search: Minimax Algorithm

Used in competitive environments (games).

- **Minimax Algorithm:** Used for two-player, zero-sum games (like chess, tic-tac-toe).
  - *Max* player tries to maximize score; *Min* tries to minimize it.
  - Explores possible game states to find optimal moves.

**Algorithm Steps:**
1. Generate game tree of all possible moves.
2. Assign values to terminal states (win/loss/draw).
3. Backup values:
   - Max node takes maximum.
   - Min node takes minimum.

## Alpha-Beta Pruning

- **Optimizes Minimax:** Prunes branches that cannot affect the final decision.
- **Improves Efficiency:** Explores fewer nodes, leading to faster decisions while still yielding the same move as full minimax.

## Case Study: AI for Autonomous Drone Delivery in Urban Environments

**Application Overview:**
- Drones deliver packages in cities, navigating buildings, traffic, weather, and regulations.

**Key AI Concepts Applied:**
- **Environment classification:** Drones operate in partially observable, stochastic, dynamic, and continuous environments.
- **Path planning:** Uses A* or Dijkstra’s algorithm with real-time heuristics (traffic, weather).
- **Constraint Satisfaction:** Must obey no-fly zones, avoid obstacles, deliver within time windows.
- **Local Search/Optimization:** Optimize routes for energy efficiency, minimize delivery delays.
- **Adversarial Search:** In crowded airspace, drones may need to compete for optimal paths.
- **Search Algorithms:** Help drones find shortest, safest, most efficient delivery paths, rerouting in real time for obstacles or changes.
- **Learning:** Drones can use reinforcement learning to improve navigation based on experience.

### In Summary

Each of these AI concepts plays a crucial role in modern intelligent systems, especially in complex, 
real-world tasks like autonomous drone navigation in urban delivery scenarios, requiring problem-solving, dynamic adaptation,
 constraint handling, and optimal decision-making.